类似有页面画布编辑器需求产品的实现方案：

photopea：在线ps，完全由Canvas实现的画布
figma：Canvas画布+dom工具栏
appsmith：Dom + 一层貌似背景的Canvas
amis：PC是Dom，移动端是Iframe + Dom
mendix：Iframe + Dom
低代码引擎：Iframe + Dom
tmagic-editor：Iframe + Dom
Canvas
Canvas在性能以及可操作性等方面都相比较Dom都有巨大的优势，但是由于canvas中的事件实现比较复杂；不支持HTML元素以及CSS，组件只能通过canvas来实现；大屏幕下像素多带来的性能问题等方面的问题。

我们的目标系统是一个承载着交互的业务系统就限定了无法使用纯canvas进行实现，同时在编辑的过程中是要求近乎所见即所得的，所以画布和最终产物要尽可能保持一致，避免存在多套不一致的方案需要维护。所以Canvas方案尽管有种种优势也不是适合的方案。

纯Dom方案
直接使用Dom绘制一个画布的优势在于简单方便：可以方便的进行布局，可以直接使用成熟的组件库，可以使用成熟的操作方案等。

Dom方案可能存在的问题：

Dom节点很多：组件本身的dom以及为了布局或者嵌套形成的Dom，不过目前还未发现成为性能瓶颈
样式隔离问题：设计器和画布的样式可能会产生冲突，比如不同的主题或者主题之间有冲突，内外的样式可能就会产生冲突，一般说来是画布中的内容需要隔绝外层设计器的影响
环境可能不纯净：设计器画布中内容的运行环境和运行时的环境可能会有区别，基于实现的不同可能会产生不同程度的依赖。
耦合较强：对于编辑状态还是运行状态分层处理较为复杂，可能会有很多判断是编辑还是运行的情况
自适应
这边简单把一个页面可以在不同分辨率的屏幕下都有不错的表现称之为自适应的页面。一般情况下自适应常见的几种种方式实现：针对不同分辨率做不同的实现，比较典型的就是pc一套代码移动端一套代码；通过响应式布局进行适配。还有一种方案就是在不同尺寸的情况下，以某种比例动态计算内部内容的宽高，这种方案和通过缩放实现的自适应的效果是类似的，都是针对同一类型不同尺寸屏幕的表现进行自适应，比如pc小屏幕和大屏幕之间进行适应，但是无法做到到移动端也表现较好。

考虑响应式实现，由于纯Dom方案处理不同屏幕尺寸的大小只能直接调整画布的宽高来在表现上看起来是某个尺寸，但实际上和真实的不同尺寸屏幕区别较大，特别是这种情况下主流的响应式处理方案--媒体查询（@media）将无法起作用，因为整个页面的media信息是没有改变的。

针对这个问题倒也想了一个平替方案：不使用媒体查询处理响应式，监听屏幕的尺寸然后在页面最外层节点上加上一个标志当前尺寸的className，用嵌套的css规则来进行响应式处理。在画布中的时候可以直接手动控制画布中页面最外层节点的尺寸标志，或者运行时系统就根据某个节点的框高直接来计算。

Iframe + Dom
方案设计
Iframe + Dom方案的简单描述就是在编辑器中的画布是以Iframe的形式把实际的页面嵌入到画布中作为“背景”，Iframe之外的上层提供选中拖动等工具。



整体操作和在直接纯Dom方案下是类似的：用户在编辑器中把组件拖入到画布中，画布根据一定的规则判断能否拖入到对应的位置，能够在指定位置拖入则把这个组件加入到页面的组件列表中。有区别的地方来了：纯Dom方案下，会直接根据新的组件列表信息直接就在画布上渲染出来组件；在新的方案中，会有模拟器感知到这个变化，并且把这个变化告诉渲染层，渲染层再根据最新的结果进行渲染。

同理，如果在画布上拖动组件或者修改组件的配置信息，也是编辑器根据实际情况处理改动是否生效，改动生效后由模拟器感知这个变化并且通知渲染层，渲染层根据信息进行渲染。

可以看到在新的模式下，每一层要做的事情时相对明确的：

编辑器在高纬度定义组件和画布的特性
模拟器负责组件具体的行为，把有效的编辑结果写入到数据中，同时承担编辑时候辅助信息显示（比如框选、可拖入区域以及错误状态等）
渲染层只会根据传入的数据进行渲染，不关注画布发生什么
在明确的职责下，各层级都可以根据特定进行独立设计，只要保证层级之间的接口能够在模拟器层做好转换和适配。

优劣势分析
由于画布最终实际上也是Dom结构，所以Dom结构的优势与缺点基本上也是存在的。同时由于采用了Iframe进行隔离性的渲染，会有一些额外的优势：

Iframe + Dom方案相对纯Dom方案来说的优势主要是Iframe提供一种简单高效的沙箱隔离方案，天然隔绝了设计器的环境对画布环境（css和js）的影响，所以两者之间除了通信之外几乎不会受到其他干扰
由于是一个独立的Frame在实现响应式布局上任何方案都能使用
分层的结构方便实现不同的布局方式，布局方式只是编辑时才重点关注的信息，在渲染时基本上都是根据JSON信息直接渲染
当然有优势的话也会有一些劣势：

Iframe带来沙箱隔离的同时也让双方只能通过通信进行交换数据，对数据交互的接口设计提出更高的要求
Iframe的名声及其自身存在的某些问题会带来一些处理方式和性能上的影响
相比较优势而言，上述的劣势是可以接受的，好的接口设计本就是应该的。Iframe只要不是滥用，在前端有环境隔离需求的各种解决方案中就是神一般的存在。