1. FVS交互的成功经验与组件库的联系
    FVS易于上手  <= 业务上设计原理  
所见即所得, 分布式传达 -》 组件与用户交互的每一个细节,组件交互之后状态的显示
举例 button - modal
    fineui vs antd
    用户在组件层级的整体交互
    用户在前端行为的细节交互
扩大到 form、step
    *组件与组件之间的联动交互

2. 组件库迭代的优先级建议
   依据 Brad Frost 的理论，一个 Design System 中的组件可以有以下分类：
        Atoms 原子:最细粒度的组件, Button, Input 等。
        Molecules 分子:由一组原子组成。例如,标签、Input 和按钮构成一个表单元素。它们是 Design System 的基础。
        Organisms 器官:也就是系统中的区块，由各个分子组成的更为复杂的组件。
        Templates 模板:它们是由一组「Organisms」组合而成的最终结构,它约定了页面中的实际布局。
        Pages 页面

    从组件的定制化程度来讲，根据我的理解它又可以分为：
        基础组件:可以是 Atoms、Molecules、Organisms,它涵盖了 Design System 中的样式以及约定的交互范式，不关心业务逻辑与相应的接口数据格式。
        业务组件:由基础组件组装而成，涵盖具体的业务逻辑（与接口请求）。

3. fineui 组件的细分场景
    组件库需要制定约束和规范。
    整体：
        约束：用户/研发只能这么用
        方便：这么用就可以达到效果
    fineui 的约束失效:
        fineui 在业务中实现方案很灵活, 产品中存在很多通过独创写法完成的“细分功能组件“。
        同时为了满足很多独特场景, fineui 的基础组件赋予了很多并不常用的功能。
        这类组件有的在文档中没有暴露, 同时交互上也无法直观看到组件内部实现, 替换成本很大所以需要保留。
    我的想法: 
        需要将 fineui 组件需要约束的功能提炼出来, 与 react-ui 保持一致, react-ui 不涉及到的功能就先不改动 fineui。

4. 交互与样式抽离组件设计理念调研
    目前技术上能实现的只有基于 react hooks 实现的 headless ui。
    我的问题: 是否需要在 react-ui 的复杂组件上采用这套理论进行尝试?
    挑战: fineui 是完全不同的框架，底层上很难实现。
          headless ui 目前还不是主流,但很可能成为趋势, 研发需要从 0 到 1 调研实践这个框架, 具有技术风险。
          headless ui 的使用成本对于原子级别的组件过于重量级了，原子级别的组件敲定交互与样式后大多不需要修改，会降低研发的开发效率。
    机遇: 表单等复杂组合的组件，基于这种 headless ui 有很优秀的实践。
         表单步骤条等本身就会随着业务的改动有大量的需求，即使设计出来的基础的组件还是需要二次封装，甚至重新编写。

6. 借鉴antd的设计理念
    设计理念这个形容太宽泛了,交互和研发的切入点也不同，能否具像化需要借鉴的是什么？需要创新的又是什么？（用户交互？组件动效？组件设计规范？研发/交互设计理念）
    antd 的设计是面向中后台的,公司的产品 FRBI 是数据处理类的软件, 低代码是面向中后台的, 简道云面向小微企业的。antd 主打的“自然”, 是否与帆软、frbi预期达到的产品主题一致呢?
    antd 组件库目前在软件行业广泛使用, 如何在借鉴 antd 的同时打造出 “独” 属于帆软的设计呢?
        代码层面: onselect、watermark、combo、editor 等是技术上的独特风格和理解。
        设计层面: fineui设计风格其实是具有独特性的, 如何革新这种独特性可能是重点。

7. 技术选型敲定？


适用于FRBI产品线乃至帆软全公司的设计规范 + 优秀独特的设计风格 => "交互护城河"
=>拥有一致、优秀的用户体验  => 用户习惯



  

