Object.defineProperty：数据属性和访问属性
  但是需要对对象的每一个属性进行遍历劫持；
    如果对象上有新增的属性，则需要对新增的属性再次进行劫持；
    如果属性是对象，还需要深度遍历。
    这也是为什么Vue给对象新增属性需要通过$set的原因，
    其原理也是通过Object.defineProperty对新增的属性再次进行劫持。
  我们总结一下Object.defineProperty在劫持对象和数组时的缺陷：
  1.无法检测到对象属性的添加或删除 Vue.$set
  2.无法检测数组元素的变化，需要进行数组方法的重写
  3.无法检测数组的长度的修改

Proxy：重载了点运算符，即用自己的定义覆盖了语言的原始定义
  Proxy则更彻底，不在局限某个属性，而是直接对整个对象进行代理，我们看一下ES6文档对Proxy的描述：
    Proxy可以理解成，在目标对象之前架设一层“拦截”，
    外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。
  var proxy = new Proxy(target, handler);
  可以看到Proxy直接代理了target整个对象，
  并且返回了一个新的对象，通过监听代理对象上属性的变化来获取目标对象属性的变化；
  而且我们发现Proxy不仅能够监听到属性的增加，还能监听属性的删除，比Object.defineProperty的功能更为强大。
  取消：若需要在Proxy内部调用对象的默认行为，建议使用Reflect，
  取消：Proxy.revocable(target, handler

vue3双向绑定更改
  vue2: 数据劫持和发布订阅模式相结合，Object.defineProperty实现劫持，
        对data选项在渲染过程中，数据遍历添加getset。
        得知属性变化后，再通过监听器 Observer 通知订阅者 Watcher更新视图
  vue3通过函数reactive()给对象新增proxy对象监听内部属性变化