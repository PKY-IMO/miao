// fnÊúÄÂ§ßÊâßË°åÊ¨°Êï∞‰∏∫n, fnÂèØÂºÇÊ≠•ÂèØÂêåÊ≠•ÔºåÂ§±Ë¥•‰πãÂêéËøá1ÁßíÊé•ÁùÄÊâßË°å

function maxRequest(url = ``, times = 3) {
  // 1. Èó≠ÂåÖÔºå‰øùÂ≠òÁßÅÊúâÂ±ûÊÄß
  function autoRetry (url, times) {
    console.log('times = ', times);
    times--;
    // 2. fetch Êú¨Ë∫´ËøîÂõûÂÄºÂ∞±ÊòØ PromiseÔºå‰∏çÈúÄË¶ÅÂÜçÊ¨°‰ΩøÁî® Promise ÂåÖË£π
    return fetch(url).then(value => {
        if(value.status === 200) {
          console.log(`‚úÖ OK`, value);
          // 3. ÊâãÂä®ËøîÂõû Promise ÁöÑ valueÔºå Ê≤°ÊúâËøîÂõûÂÄº ÈªòËÆ§ËøîÂõû undefined
          return value;
        } else {
          throw new Error(`‚ùå  http code error: ${value.status }`);
        }
      }).catch((err) => {
        console.log(`‚ùå  Error`, err);
        if (times < 1) {
          // 4. Êñπ‰æøÂêéÁª≠ÁöÑ thenable Â§ÑÁêÜ error
          throw new Error('üí©  over max request times!');
        } else {
          // 5. ËøîÂõûÈÄíÂΩíÊñπÊ≥ï 
          return autoRetry(url, times);
        }
      });
  }
  // 6. ËøîÂõû‰∏Ä‰∏™ Promise ÁöÑÁªìÊûú ÔºàÊàêÂäü Promise ÊàñÂ§±Ë¥• PromiseÔºâ
  return autoRetry(url, times);
}
      