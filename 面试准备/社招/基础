js
事件循环
    浏览器有很多进程，包括网络，渲染，io之类的，js排除webworker的情况下是单线程的语言，
    浏览器通过宏任务、微任务队列协调多线程的运行。
    1.从任务队列中取出一个宏任务并执行（同步代。。。）。
    2.检查微任务队列，执行并清空微任务队列，
    如果在微任务的执行中又加入了新的微任务，也会在这一步一起执行。
    3.进入更新渲染阶段，判断是否需要更新渲染（渲染间隔决定），需要的话在渲染之前执行resize，scroll，raf等，如果有空余时间就执行rIc。
    微任务：precess.nextTick promise  object.observe mutationObserver

    浏览器的Event loop是在 HTML5 中定义的规范，而 node 中则由libuv库实现。
    node端：
    六个阶段，每个阶段执行完清空nexttick queue，微任务 queue，再执行下一阶段
    timers：setTimeout setInterval
    io 
    idle 
    poll （等待没有完成的io）
    check： setImmediate
    close callbacks
    
闭包
  当函数可以记住并访问定义时的作用域时就产生了闭包，即使函数是在当前词法作用域之外执行。
  实现：作用域链+垃圾回收
  函数嵌套函数，内部函数引用外部函数变量，且存在全局变量是内部函数的引用，当外部函数一执行就产生闭包。
    1）能够阻止词法作用域的回收
    2）私有化变量
    3）模块化

原型链

// js实现对象的方式就是原型链，原型链是一种链式关系，包含了对象的继承关系。
// 在判断对象A是否是B的实例对象时，可以沿着对象A的原型链（__proto__）进行查找，能查找到B.prototype则是，原理与instanceof一致。
// 函数有一个prototype属性，即显式原型，指向构造函数的原型对象。Foo -----prototype--->  Foo.prototype​
// 构造函数的原型对象的construtor属性指向构造函数。Foo.prototype ----constructor--->   Foo ​​
// 实例对象通过__proto__，即隐式原型访问它的原型。
// 实例对象的隐式原型等于构造函数的显式原型。
// Object对象也是函数，Object.__proto__===Function.prototype ，Function.prototype.__proto__===Object.prototype
// 原型链的终点是Object.prototype，Object.prototype的再指向null,即Object.prototype.__ptoto__===null

function Father(arg) {
  
}
function Child(arg) {
  Father.call(this, arg)
}


//Child.prototype.__proto__ = Father.prototype
//Object.setPrototypeOf(Child.prototype, Father.prototype)
Child.prototype = Object.create(Father.prototype)

function Creature(type, born) {
  this.type = type
  this.born = born
}

function Dog(born, name, master) {
  Creature.call(this, 'dog', born)
  this.name = name
  this.master = master
}

//ES6 Class extends  
//寄生组合继承是先创建子类实例this对象，然后再对其增强；
//而ES6先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），
//然后再用子类的构造函数修改this。

//MySet2.__proto__ = Father           ==>父类的静态方法也可以访问到
//MySet2.prototype.__proto__ === Father.prototype

//Object.setPrototypeOf(MySet2.prototype, Father.prototype)
//Object.setPrototypeOf(MySet2, Father)

class MySet2 extends Father{
  constructor(inits) {
    //super调用之前不能使用this，因为super之后this才会绑定到新对象上，
    //super.add()调用父类的add方法
    super()// 相当于Father.call(this, a,b,c,d) 
  }
  // super.xxx()相当于 Father.prototype.xxx.call(this),调用时把this传进去了
}



/**
 * 继承实现
 * 
 * 
 */

function Person() {
  this.kind = "person";
}

Person.prototype.eat = function (food) {
  console.log(this.kind + " is eating " + food);
}

function Student() {

}


//1. 原型链继承：可以实现继承，都共享有父级原型对象的属性及方法,
// 缺点：无法传参;引用类型的属性被所有实例共享
Student.prototype = new Person();
//2. 构造继承:可以传参、实例化对象独立
//缺点：无法调用父级构造函数原型对象的方法（prototype） 父类的静态方法
//      方法都在构造函数中定义，每次创建实例都会创建一遍方法
function student() {
  person.call(this);
}
//3.组合继承 原型链+构造函数继承，父级构造函数属性、原型对象的属性方法以及可以传参
// 无论什么情况，都会调用两次父级构造函数：1.创建子级原型2.子级构造函数内部
// 从而覆盖了Child.prototype子类原型中的同名属性。这种被覆盖的情况造成了性能上的浪费。
Child.prototype = new Parent() 
Child.prototype.constructor = Child
//4. 原型式继承 : 可以不用创建父类实例
/* 原型式继承 */
function object(obj) {
  function F() {}
  F.prototype = obj
  return new F()
}
//例子：
var person = {
  name:'TanJ',
  colors:['red','green','blue']
}
var person1 = object(person)
person1.colors.push('yellow')
console.log(person1.colors) /* ["red", "green", "blue", "yellow"] */
var person2 = object(person)
console.log(person2.colors) /* ["red", "green", "blue", "yellow"] */
//与原型链继承类似，引用属性共享，
student.prototype = Object.create(person.prototype);


// 5.寄生式继承：使用原型式继承获得一个目标对象的浅复制，然后增强这个浅复制的能力
/* 寄生式继承 */
function createAnother(original){
  var clone = object(original);    /* 通过调用函数创建一个新对象 */
  clone.sayHi = function(){      /* 以某种方式来增强这个对象 */
      console.log("hi")
  }
  return clone                  /* 返回这个对象 */
}


//6. 寄生组合继承 ：组合继承会两次调用父类的构造函数造成浪费，寄生组合继承就可以解决这个问题
/*核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费 */
function inheritPrototype(subType, superType) {
  var tmp = object(superType.prototype) // 创建了父类原型的浅复制
  tmp.constructor = subType             // 修正原型的构造函数
  subType.prototype = tmp              // 将子类的原型替换为这个原型
}
//SubType.prototype.__proto__= object.prototype
//(1) 既能具有组合继承的优点，又可以不必两次调用超类型的构造函数
//(2) 避免了在 SubType.prototype 上面创建不必要的、多余的属性
// （在原型链继承时，SubType.prototype被重写为SuperType的实例，因此具有了他的实例属性）

//参考： https://blog.csdn.net/jian_zi/article/details/99847658

Object.__proto__ === Function.prototype  // true

Function.__proto__ === Function.prototype // true Function类作为最顶层的类，原型属性指向的是自己的原型对象
Function.prototype.__proto__ === Object.prototype

ES6

chrome版本
hooks的包
vue生命周期
useEffect和useLayoutEffect
vue2和vue3 v-model 区别  
  vue2 :value    @Input  单个
  vue3 :modelValue @update 多个
data在create前还是后 之前
跨域js脚本能解析吗
js脚本异步