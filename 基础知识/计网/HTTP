HTTP  超文本传输协议，明文传输
【HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议】

HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。
HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。
客户端以及服务器指定使用适合的MIME-type内容类型。
HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。
缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。
另一方面，在服务器不需要先前信息时它的应答就较快。

HTTP 消息结构：请求报文和响应报文
  客户端发送一个HTTP请求到服务器的请求消息包括以下格式：
    请求行（request line）、请求头（header）、空行和请求体四个部分组成。（GET /hello.txt HTTP/1.1）
    （get post区别） host，keep-alive，User-Agent，Accept-Endoding，Accept-Language，cookie
  HTTP响应也由四个部分组成，分别是：状态行、响应头、空行和响应体。（HTTP/1.1 200 OK）
    （状态码） （消息报头的内容）（缓存）


HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。
HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。

GET和POST是HTTP协议中的两种发送请求的方法，底层都是tcp连接
get一般是用来获取数据，post提交数据
  GET在浏览器回退时是无害的，而POST会再次提交请求。
  GET请求会被浏览器主动cache，而POST不会，除非手动设置。
  GET会被网络上的各种奇怪的中间节点（如CDN）缓存，POST不会
  GET产生的URL地址可以被Bookmark，而POST不可以。
  GET请求只能进行url编码，而POST支持多种编码方式。
  GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
  GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。
  GET参数通过URL传递，POST放在Request body中。


HTTP状态码：
1XX（临时响应）    100 继续  （505-101 HTTP版本协议）
2XX（成功）        200 OK
3XX（重定向）      301 永久重定向 300(multi choices)
                  302 303（使用get直接跳转） 307（不变） 临时重定向(Location)
                  304 未修改(Last-Modified)  305(使用代理)
4XX（客户端出错）  400（客户端语法错误） 401未授权 404未找到 408请求超时 403禁止访问 407（未代理授权）
5XX（服务端出错）  500（服务端语法错误）503（停机维护）      504网关超时

HTTP缓存
强制缓存：浏览器判断命中强制缓存就直接返回请求响应，不用与服务器进行通信。
  # 响应头设置【expires】 /绝对时间/  向下兼容 （客户端本地时间与服务器时间不同步）
  # HTTP1.1【Cache-Control】max-age。
      max-age  /滑动时间/ 单位是秒 s-maxage 代理服务器过期时间
      no-store 不缓存 no-cache 强制进行协商缓存
      private public 设置代理服务器公共缓存功能
  ||浏览器强制刷新，请求会带上cache-Control :no-cache和pragma: no-cache||
协商缓存：使用本地缓存之前，像服务器发送一次GET请求，协商当前缓存是否过期，解决强制缓存不更新的问题
  # 响应头设置 Cache-Control: no-cache
              last-modified: utc/时间戳/
    请求头携带：If-Modified-Since：utc时间戳， 服务端判断时间一致则返回304，客户端使用本地缓存。
    问题：单位是秒，无法根据时间戳来识别真正的更新
  # HTTP1.1【ETag】服务器对不同资源进行hash运算，生成字符串 /文件指纹/ (补充方案)
    响应头设置 Cache-Control: no-cache
              etag: 字符串
    请求头携带: if-none-match: 字符串 服务端判断时间一致则返回304，客户端使用本地缓存。
    问题：计算开销大，ETag强验证（字节）和弱验证（部分属性）
总结：根据资源类型不同设置不同的缓存策略，
      html文件等修改要及时更新：协商缓存
      图片（不修改）：强制缓存
      css，js文件（修改）：强制缓存，利用文件指纹，通过请求url变化获取更新

客户端从服务器请求数据需要经历如下基本步骤: 
       1、如果请求命中本地缓存则从本地缓存中获取一个对应资源的"copy"； 
       2、检查这个"copy"是否fresh,是则直接返回，否则继续向服务器转发请求。
       3、服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。 
       4、客户端更新本地缓存。
  跳过2的方法：Cache-Control: no-cache，must-revalidate; Cache-Control:max-age: 0；Pragma: no-cache
  强制刷新的方法：ctrl—F5，

Connection：keep-alive  Connection: false
HTTP1.1长连接，本质上是在一个tcp连接的基础上发送多个http请求和响应
Keep-Alive不会永久保持连接，它有一个保持时间。
可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。

HTTP1.0 /1.1/2.0
HTTP1.0 
  无状态：session
  无连接：无法复用连接 HTTP队头阻塞：下一个请求必须在前一个请求响应到达之前才能发送。
HTTP1.1 
  长连接：connection
  缓存：Cache-Control
  Host字段：使得一个服务器能够用来创建多个Web站点
  管道化：“并行”发送多个请求，但是响应依旧按顺序响应，还是无法解决队头阻塞
  断点续传：range content-range  ----206
  # 还是无法解决队头阻塞
HTTP2.0
  二进制分帧：在应用层和传输层之间增加一个二进制分帧层，原来的、header和body部分用frame重新封装了一层
  多路复用： 帧（frame）：HTTP2.0通信的最小单位，每个帧包含帧头部，至少也会标识出当前帧所属的流（stream id。
  头部压缩：通讯双方各自cache一份header fields表，既避免了重复header的传输（cookie比较大且每次都重复发送）
  请求优先级： 数据帧的优先级
  服务器推送
HTTP3.0
  基于UDP 协议的“QUIC”协议，让HTTP跑在QUIC上而不是TCP上。
HTTP队头阻塞解决方案：
  HTTP2.0 多路复用；把消息拆分成帧，给帧分配序号，然后按序号组装消息
  增加任务队列： 并发连接：chrome可以支持6个
                域名分片
  HTTP3.0 基于udp解决tcp对头阻塞

HTTPS 采用的加密方式: HTTPS 采用混合的加密机制。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。

请求头：大小写不敏感

1. Host 描述请求将被发送的目的地，只含域名和端口号；
2. Origin 请求是从哪里发起的，包括域名和端口号，这个参数一般存在于CORS跨域请求中，
可以看到response有对应的header: Access-Control-Allow-Origin
3. Referer 告知服务器请求的原始资源的URI,其用于所有类型的请求，包括：协议+域名+查询参数

http:// 在js中是label可以跳转不报错

HTTP 断点续传
range:

HTTPS握手
第一步，爱丽丝给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。

第二步，鲍勃确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。

第三步，爱丽丝确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给鲍勃。

第四步，鲍勃使用自己的私钥，获取爱丽丝发来的随机数（即Premaster secret）。

第五步，爱丽丝和鲍勃根据约定的加密方法，使用前面的三个随机数，生成"对话密钥"（session key），用来加密接下来的整个对话过程。

签名流程：先hash得到摘要
1. CA机构使用hash算法对客户提交的资料（此资料为名称、组织、国家等）进行加密后，生成一段HASH值，即摘要；
2. CA机构用自己的私钥将生成的乳摘要进行加密，生成加密后的密文；
3. CA机构将生成的密文、客户提交的公钥、客户提交的信息，签发生成一个数字证书，交给客户；

浏览器验签流程：
1. 浏览器拿到CA机构发的数字证书后，进行拆解，拆解为：客户提交的资料、CA机构私钥加密后的密文、客户的公钥；
2. 浏览器使用CA机构声明的HASH算法，对拆解出来的资料进行运算，得出一个HASH值，即摘要；
3. 浏览器使用CA机构的公钥（PKI体系会对外公布CA的公钥）对拆解出来的密文进行解密，得出摘要；
4. 若第2步得出来的HASH值与第3步解密出来的值相等，则证明CA机构的身份验证是没有问题的；