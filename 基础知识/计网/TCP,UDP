TCP:面向流、可靠的协议、点对点通信   -》三握四挥、滑动窗口+拥塞控制(慢开始，拥塞控制，快重传，快恢复)+超时重传、校验和
UDP：面向报文、不可靠，点对点+广播等通信方式

三次握手
  A为客户端，B为服务端
    首先 B 处于 （监听）状态，等待客户的连接请求。
    A发送请求连接SYN报文，进入syn——sent状态，报文初始序号为x
    B收到后，返回同意建立的SYN+ACK报文，进入syn——recv状态，初始序列号为y，确认序列号为x+1，
    A收到后还要确认ACK报文，进入establed状态，确认序列号为y+1，初始序列号为X+1
  是三不是二： 
    1.双全工，三次握手双方刚好接收发送一次
    2.三次握手维护了一个序列号，防止失效的连接请求到达服务器开启不必要的连接

四次挥手
    A发送FIN报文，进入FIN-WAIT-1状态
    B收到后返回ACK报文，进入CLOSE-WAIT状态，A进入FIN-WAIT-2阶段
    B发送完剩余数据后，返回FIN+ACK报文，进入LAST-ACK状态。
    A发送ACK报文，进入TIME-WAIT状态，在2MSL段时间后断开连接。
    B收到ACK后进入CLOSED状态
  是四不是三：
    1.B可能需要继续传数据，不会立刻关闭SOCKET，所以先回复ACK，确认关闭时发FIN+ACK
  2MSL：
    1.是报文一次发送和回复所需要的最大时间。
    2.客户端需要确认服务端收到最后的ACK报文。如果没有再次收到FIN报文，可以确认服务端已经收到了ACK报文，TCP结束
    3.维护好会话的序列号

滑动窗口：
  描述接收方的TCP数据报缓冲区大小的数据
  发送方根据这个数据来计算自己最多能发送多长的数据，如果发送方收到接收方的窗口大小为0的TCP数据报，
  那么发送方将停止发送数据，等到接收方发送窗口大小不为0的数据报的到来
  1.发送窗口只有收到发送窗口内字节的ACK确认，才会移动发送窗口的左边界
  2.接收窗口只有在前面所有的段都确认的情况下才会移动左边界。
    当在前面还有字节未接收但收 到后面字节的情况下，窗口不会移动，并不对后续字节确认。以此确保对端会对这些数据重传
  3.遵循快速重传、累计确认、选择确认等规则

拥塞控制；
  Reno 适用于低延时、低带宽的网络，它将拥塞控制的过程分为四个阶段：
        慢启动、拥塞避免、快重传和快恢复，对应的状态如下所示：
  1.慢启动阶段思路是不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小，
    在没有出现丢包时每收到一个 ACK 就将拥塞窗口大小加一（单位是 MSS，最大单个报文段长度），
    每轮次发送窗口增加一倍，呈指数增长，若出现丢包，则将拥塞窗口减半，进入拥塞避免阶段；
  2.当窗口达到慢启动阈值或出现丢包时，进入拥塞避免阶段，窗口每轮次加一，呈线性增长；
  3.当收到对一个报文的三个重复的 ACK 时，认为这个报文的下一个报文丢失了，进入快重传阶段，
    要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方，
    可提高网络吞吐量约20%）而不要等到自己发送数据时捎带确认；
  4.快重传完成后进入快恢复阶段，将慢启动阈值修改为当前拥塞窗口值的一半，
    同时拥塞窗口值等于慢启动阈值，然后进入拥塞避免阶段，重复上述过程。