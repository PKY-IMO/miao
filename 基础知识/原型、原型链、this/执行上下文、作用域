执行上下文：
  当前代码被解析和执行时所在的环境。
  js中分为（1）全局执行上下文（2）函数执行上下文
  执行上下文创建过程的过程为：
    1）创建变量对象：初始化函数的arguments，提升函数声明和变量声明
    2）创建作用域链
    3）确定this的值
执行栈/调用栈：
  用于描述函数间的调用和等待关系，具有后进先出的结构，存储在代码执行期间创建的所有执行上下文。
    1）首次运行JS代码的时候，会创建一个全局执行的上下文，压入执行栈，
       每当函数调用时，引擎会为该函数创建一个新的函数执行上下文，压入栈顶。
    2）当栈顶的函数运行完成，函数上下文会从执行栈中弹出

作用域（词法作用域）：
  负责维护当前代码关于所有声明的标识符（变量）的访问权限。
  js采用词法作用域，作用域由代码书写时的位置决定（with和eval可以修改词法作用域）
  作用域分为：
    1）全局作用域
    2）函数作用域
    3）块级作用域
作用域链：
  从当前作用域开始一层一层向上寻找变量，直到找到变量，如果到全局作用域都没有找到就放弃。
  这种一层一层的关系，就是作用域链。作用域存在遮蔽效益，即同名变量内部作用域声明会屏蔽外部的变量。

闭包：
  当函数可以记住并访问定义时的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。
  函数嵌套函数，内部函数引用外部函数变量，且存在全局变量是内部函数的引用，当外部函数一执行就产生闭包。
    1）能够阻止词法作用域的回收
    2）私有化变量
    3）模块化



