加载时的优化：http请求、缓存、静态资源cdn、图片优化、字体、服务端渲染
  1.减少http请求次数，将多个小文件合并成大文件（dns-tcp-http）
  2.使用服务器端渲染，返回html文件，客户端直接解析html即可
    客户端渲染：html-》下载js-》运行文件-》dom-》渲染。
  3.静态资源使用CDN
  4.CSS写在头部，Js写在底部或者加上defer、async （FOUC 无样式内容闪烁）
    所有放在head标签里的CSS和JS文件都会堵塞渲染。
  5.字体图标代替图片（iconfont）字体图标就是将图标制作成一个字体，可以设置属性，例如font-size、color等等，非常方便。
  6.合理使用HTTP缓存
    总结：根据资源类型不同设置不同的缓存策略，
      html文件等修改要及时更新：协商缓存
      图片（不修改）：强制缓存
      css，js文件（修改）：强制缓存，利用文件指纹，通过请求url变化获取更新
  7.图片的优化：
    （1）图片懒加载，出现在可视区域再加载
    （2）降低图片质量
    （3）CSS3渐变阴影替代图片
    （4）雪碧图
    （5）webp格式
  8.webpack懒加载

运行时的优化
  1.减少重排重绘 className，display:none(文档碎片)，动画脱标，减少table
    （1）用JavaScript修改样式时，不要逐条写样式，而是替换class一次性改变属性样式。
    （2）如果要对DOM元素执行一系列操作，可以将DOM元素脱离文档流，修改完成后，再将它带回文档。
    推荐使用隐藏元素（display:none）,文档碎片 document.createDocumentFragment() 
    （3）减少table布局
    （4）对于动画等多次重排的元素，脱标减少重绘范围
  2.事件委托
    事件委托基于事件冒泡机制，指定一个事件的处理程序可以管理一类型所有的事件。（按钮等鼠标键盘事件）
  3.降低css选择器的复杂性
  4.flexbox布局
  5.优先使用css3不引发回流和重绘的属性transform,opacity,filter
  


重排发生的情况：
  添加或者删除可见的DOM元素
  元素位置改变
  元素尺寸改变
  元素内容改变（例如：一个文本被另一个不同尺寸的图片替代）
  页面渲染初始化（这个无法避免）
  浏览器窗口尺寸改变
css3不需要回流和重绘的属性：
  transform
  opacity
  filter
  Will-change


CDN：